# -*- coding: utf-8 -*-
"""heart_disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EQO2oY87T-9ROh8hJ-Gl4G9u6l5MYYTq
"""

import numpy as np
import pandas as pd
import pickle
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb
from sklearn.ensemble import VotingClassifier


df = pd.read_csv("C:/Users/SHREYASH VERMA/Desktop/FLASKPRO/heart_statlog_cleveland_hungary_final.csv")

# def remove_outliers_iqr(column):
#     Q1 = column.quantile(0.25)
#     Q3 = column.quantile(0.75)
#     IQR = Q3 - Q1
#     lower_bound = Q1 - 1.5 * IQR
#     upper_bound = Q3 + 1.5 * IQR

#     return column[(column >= lower_bound) & (column <= upper_bound)]


# df_no_outliers = pd.DataFrame()
# for col in df.columns:
#     if df[col].dtype in [np.float64, np.int64]:
#         no_outliers_col = remove_outliers_iqr(df[col])
#         df_no_outliers[col] = no_outliers_col
#     else:
#         df_no_outliers[col] = df[col]

# df_no_outliers = df_no_outliers.fillna(df_no_outliers.mean())

X = df.drop('target', axis=1)
Y = df['target']


scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

rf_model = RandomForestClassifier()
rf_model.fit(X_train, Y_train)

xgb_model = xgb.XGBClassifier()
xgb_model.fit(X_train, Y_train)

ensemble_model = VotingClassifier(estimators=[('rf', rf_model), ('xgb', xgb_model)], voting='soft')
ensemble_model.fit(X_train, Y_train)


pickle.dump(ensemble_model, open('heart_disease.pkl', 'wb'))
